- name: Install packages
  apt:
    update_cache: yes
    state: latest
    pkg:
    - unattended-upgrades
    - net-tools
    - bind9-dnsutils
    - bsd-mailx
    - build-essential
    - pkg-config
    - libicu-dev
    - bison
    - flex
    - libreadline-dev
    - libz-dev
    - chrony
    - mc
    - nagios-nrpe-server
    - monitoring-plugins
    - ntpdate
    - postfix
    - rdiff-backup
    - wget
    - whois
    - apt-show-versions
    - apache2
    - mariadb-server
    - python3-pymysql
    - memcached
    - nodejs
    - npm
    - php-apcu
    - php-bcmath
    - php-bz2
    - php-cli
    - php-curl
    - php-fpm
    - php-gd
    - php-gmp
    - php-imagick
    - php-imap
    - php-intl
    - php-ldap
    - php-mbstring
    - php-redis
    - php-memcached
    - php-mysql
    - php-opcache
    - php-readline
    - php-xml
    - php-json
    - php-zip
    - php-pear
    - libmagickcore-6.q16-6-extra
    - redis-server
    - redis-tools
    - certbot
    - python3-certbot-dns-cloudflare
    - nfs-common
    - vim
    - aha
    - mutt
    - screen
    - links2
    - htop
    - tcpdump 
    - qemu-system 
    - libvirt-daemon-system 
    - virtinst
    - qemu-utils
    - postgresql-common
    - cloud-image-utils
    - cloud-init

- name: Copy unattended-upgrades configuration
  copy:
    src: 'etc/apt/apt.conf.d/{{ item }}'
    dest: '/etc/apt/apt.conf.d/{{ item }}'
  loop:
    - 20auto-upgrades
    - 50unattended-upgrades

- name: Copy nagios-nrpe configuration
  copy:
    src: 'etc/nagios/nrpe_local.cfg'
    dest: '/etc/nagios/nrpe_local.cfg'
  register: nrpe_config

- name: Restart nagios-nrpe-server
  systemd_service:
    name: nagios-nrpe-server
    state: reloaded
  when: nrpe_config.changed

- name: Copy sudo setup
  copy:
    src: 'etc/sudoers.d/nopasswd'
    dest: '/etc/sudoers.d/nopasswd'
    mode: 0440

- name: Copy renew cert script
  copy:
    src: 'root/renew_cert.sh'
    dest: '/root/renew_cert.sh'
    mode: 0755

- name: Ensure NAS mountpoint
  file:
    path: "/mnt/nas1"
    state: directory
    owner: root
    group: root
  
- name: Add NAS fstab entry
  blockinfile:
    path: /etc/fstab
    block: |
      10.100.1.1:/mnt/tank/balder /mnt/nas1 nfs defaults 0 0

- name: Add alias to /etc/aliases
  lineinfile:
    path: /etc/aliases
    regexp: '^root:'
    line: 'root: ph@pbnet.dk'
    state: present
  register: postfix_alias

- name: Run newaliases to update the alias database
  command: newaliases

- name: Copy mailname file
  copy:
    src: etc/mailname
    dest: /etc/mailname
  register: postfix_mailname

- name: Copy Postfix configuration
  copy:
    src: etc/postfix/main.cf
    dest: /etc/postfix/main.cf
  register: postfix_conf

- name: Copy Postfix relay_network
  copy:
    src: 'etc/postfix/relay_network'
    dest: '/etc/postfix/relay_network'
  register: postfix_network

- name: Copy Postfix relay_sender
  copy:
    src: 'etc/postfix/relay_sender'
    dest: '/etc/postfix/relay_sender'
  register: postfix_sender

- name: Copy Postfix relay_auth
  template:
    src: 'etc/postfix/relay_auth'
    dest: '/etc/postfix/relay_auth'
    mode: 0600
  register: postfix_auth

- name: Making postmap databases
  command: postmap {{ item }}
  loop: 
    - '/etc/postfix/relay_sender'
    - '/etc/postfix/relay_auth'
  when: postfix_sender.changed or postfix_auth.changed

- name: Reload Postfix service
  service:
    name: postfix
    state: reloaded
  when: > 
    postfix_alias.changed or 
    postfix_mailname.changed or 
    postfix_conf.changed or
    postfix_network.changed or 
    postfix_auth.changed or 
    postfix_sender.changed

- name: Ensure scripts directory
  file:
    path: /home/pmh/scripts
    state: directory
    owner: pmh
    group: pmh

- name: Copy PostgreSQL backup scripts
  template:
    src: home/pmh/scripts/{{ item }}.j2
    dest: /home/pmh/scripts/{{ item }}
    mode: 0740
    owner: pmh
    group: pmh
  loop:
    - balder_postgresql_backup.sh
    - sync_balder_to_nas2.sh
    - update_docker_registry.sh

- name: PostgreSQL backup cronjob
  cron:
    name: PostgreSQL backup
    user: pmh
    minute: "50"
    hour: "*/6"
    job: "/home/pmh/scripts/balder_postgresql_backup.sh"
 
- name: Sync to nas2 cronjob
  cron:
    name: Sync to nas2
    user: pmh
    minute: "0"
    hour: "20"
    job: "/home/pmh/scripts/sync_balder_to_nas2.sh"

- name: Update Docker registry cronjob
  cron:
    name: Update Docker registry
    user: pmh
    minute: "5"
    hour: "1"
    job: "/home/pmh/scripts/update_docker_registry.sh"

- name: Set MAILTO for pmh crontab
  cron:
    name: MAILTO
    user: pmh
    job: ph@pbnet.dk
    env: yes
  
- name: Ensure .secrets directory
  file:
    path: "/root/.secrets"
    state: directory
    owner: root
    group: root
    mode: 0700

- name: Copy Cloudflare API token
  template:
    src: root/.secrets/cloudflare.ini
    dest: /root/.secrets/cloudflare.ini
    mode: 0400

- name: Run certbot renew for root crontab
  cron:
    name: Run certbot renew
    user: root
    minute: "5"
    hour: "0"
    job: "/root/renew_cert.sh"

- name: Copy nas2 ssh key
  copy:
    dest: /root/.ssh/id_rsa
    content: "{{ ssh.nas2_key }}"
    mode: 0600

- name: Copy nas2 ssh pub key
  copy:
    dest: /root/.ssh/id_rsa.pub
    content: "{{ ssh.nas2_pub }}"

- name: Create directories for libvirt
  file:
    path: "{{ item.name }}"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "0755"
  loop:
    - { name: /export/volumes/libvirt/images, owner: libvirt-qemu, group: kvm }
    - { name: /export/volumes/libvirt/iso, owner: libvirt-qemu, group: kvm }

- name: Ensure the libvirt-qemu.d directory exists
  file:
    path: /etc/apparmor.d/abstractions/libvirt-qemu.d
    state: directory
    mode: '0755'

- name: Add AppArmor rule for libvirt volume access
  lineinfile:
    path: /etc/apparmor.d/local/abstractions/libvirt-qemu
    line: "/export/volumes/libvirt/images/** rwk,"
    create: yes
    state: present
    insertafter: EOF

- name: Restart AppArmor service
  systemd:
    name: apparmor
    state: restarted
    enabled: true

- name: Start libvirtd
  systemd_service:
    state: started
    name: libvirtd

- name: Add pmh to groups
  user:
    name: pmh
    groups: libvirt,kvm
    append: yes

- name: Setup Postgres repository
  shell: |
    echo | sudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh

- name: Install Postgres client
  apt:
    name: postgresql-client-17
    state: present
    update_cache: yes